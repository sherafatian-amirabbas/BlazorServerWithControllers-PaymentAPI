@page "/payment"
@page "/"


@inject HttpClient http;
@inject NavigationManager navigationManager;


@if (state != null && state.payment != null)
{
    <div class="card p-3 col-lg-6 offset-lg-3">

        @if (state.submissionState != null && state.submissionState.Succeed)
        {
            <label class="text-success">Operation is successfully done via your @(state.submissionState.Payload.CardType.GetDisplayName()).</label>
        }
        else
        {
            <Text>Please fill out the form to make the payment</Text>

            <EditForm Model="state.payment" OnValidSubmit="ValidSubmitHandler">

                <br />

                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="input_owner" placeholder="card owner"
                           @bind-value="state.payment.CardOwner">
                </div>

                <div class="form-floating mb-3">
                    <input type="number" class="form-control" id="input_number" placeholder="card number"
                           @bind-value="state.payment.CardNumber">
                </div>

                <div class="form-floating mb-3">
                    <input type="date" class="form-control" id="input_expiry" placeholder="expiration date"
                           @bind-value="state.payment.ExpirationDate">
                </div>

                <div class="form-floating mb-3">
                    <input type="number" class="form-control" id="input_cvc" placeholder="CVC"
                           @bind-value="state.payment.CVC">
                </div>

                <button type="submit" class="btn btn-primary">Submit</button>

                <br />
                <br />

                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationSummary></ValidationSummary>

                @if (state.submissionState != null && !state.submissionState.Succeed)
                {
                    <ul>
                        <li style="color: red;">@state.submissionState.ErrorMessage</li>
                    </ul>
                }

            </EditForm>
        }

    </div>
}


@code {
    PaymentState state;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        state = new PaymentState()
        {
            payment = new PaymentModel(),
            submissionState = null
        };
    }

    private async Task ValidSubmitHandler()
    {
        var serialized = JsonConvert.SerializeObject(state.payment);
        var stringContent = new StringContent(serialized, Encoding.UTF8, "application/json");
        var response = await http.PostAsync($"{navigationManager.BaseUri}api/payment", stringContent);
        var result = await response.Content.ReadAsStringAsync();
        state.submissionState = JsonConvert.DeserializeObject<ApiResult<PaymentSubmissionPayload>>(result);
    }

    class PaymentState
    {
        public PaymentModel payment { get; set; }
        public ApiResult<PaymentSubmissionPayload> submissionState { get; set; }
    }
}
